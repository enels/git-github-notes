git config --list
git config --global user.name=
git config --global user.email=
git config --global core.editor=
All the commands are configuration settings

git status -s
gives you a more concise version of the status command
A - files that on the staged area
M - files that have been modified
?? - files that are not been tracked

git diff
allows you view changes that have been made(the way it is in your working directory) but not yet staged
This command displays:

    the files that have been modified
    the location of the lines that have been added/removed
    the actual changes that have been made
https://git-scm.com/docs/git-diff

git diff --staged
allows you to view changes that are on the staging area that are yet to be committed

git diff --cached
displays what have been staged so far (--staged and --cached are synonyms)

git difftool
displays the unstaged changes with the stagged ones using a GUI tool
git difftool --tool=emerge
chooses the GUI tool to use
git difftool --tool-help
for help info on how to use it

git rm
Removes or deletes a file from your tracked files i.e from your staging area. After doing this you have to commit the changes.
NB: Any file that has been added to the staging area when removed using git rm cannot be recovered so for that reason
git forces you to use the -f option to prevent you from removing the staged files.

git rm --cached "file name"
Removes or deletes a file from your staging area but keeps it in your working tree. This particularly use if you forgot to add a file to the
gitignore file but already staged it. Files, directories and file-glob pattern can be passed to the command.

git log
Displays all the git commit and their commit SHA-1, author, date, commit message and file

git log -w
ignores white spaces

git log --oneline
lists one command per line, shows the first 7 characters of the commit's SHA and lastly shows commit's message

git log --stat
lists the files that have been changed in the commit, as well as the number of lines that have been added or deleted(stat for statistics).
also it list the number of files that have been modified/deleted

git log --patch or -p
This can be used to display the actual changes that has been made to a file.
The description of each line that is printed out is shown below:

    üîµ - the file that is being displayed
    üî∂ - the hash of the first version of the file and the hash of the second version of the file
        not usually important, so it's safe to ignore
    ‚ù§Ô∏è - the old version and current version of the file
    üîç - the lines where the file is added and how many lines there are
        -15,83 indicates that the old version (represented by the -) started at line 15 and that the file had 83 lines
        +15,85 indicates that the current version (represented by the +) starts at line 15 and that there are now 85 lines...these 85 lines are shown in the patch below
    ‚úèÔ∏è - the actual changes made in the commit
        lines that are red and start with a minus (-) were in the original version of the file but have been removed by the commit
        lines that are green and start with a plus (+) are new lines that have been added in the commit 
In summary
- it displays the files that have been modified
- it displays the location of the lines that have been added/removed
- it displays the actual changes that have been made.
A commit hash can be added to this command
https://git-scm.com/docs/git-diff#_generating_patches_with_p

git show
This also shows a specific commit like. This only shows the most recent commit

git show "commit hash"
The git show command will show only one commit. So don't get alarmed when you can't find any other commits - it only shows one. The output of the git show command is exactly the same as the git log -p command. So by default, git show displays:

    the commit
    the author
    the date
    the commit message
    the patch information

However, git show can be combined with most of the other flags we've looked at:

    --stat - to show the how many files were changed and the number of lines that were added/removed
    -p or --patch - this the default, but if --stat is used, the patch won't display, so pass -p to add it again
    -w - to ignore changes to whitespace

.gitignore
https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository#Ignoring-Files
https://git-scm.com/docs/gitignore#_pattern_format
https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files
https://www.toptal.com/developers/gitignore

git tag -a v1.0
git tag is used for labelling or tagginng the current version of the project you are working on. git tag -a v1.0 is called an annotated tagging.
nnotated tags are recommended because they include a lot of extra information such as:

    the person who made the tag
    the date the tag was made
    a message for the tag
without the -a flag, it's non-annotated
git tag
for verifying taggings. lists out the various tags 

git log --decorate
this include more info to the log output e.g the tag. This is almost equivalent to git log these days.
